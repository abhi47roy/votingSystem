---
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "abtnetwork"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value example below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
x-type: "hlfv1"

#
# Describe what the target network is/does.
#
description: "ABT network containing BRT, Bus, Bank and ABT as core organizations"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: "1.0"

#
# The client section will be added on a per org basis see org1.yaml and org2.yaml
#
#client:

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  brtchannel:
    
    orderers:
      - transactionO1.transactionorderer.com

    # Required. list of peers from participating orgs
    peers:
      peer0.org.brt.com:
        endorsingPeer: true

        chaincodeQuery: true

        ledgerQuery: true

        eventSource: true
      
      peer0.org.bank.com:
        endorsingPeer: true

        chaincodeQuery: true

        ledgerQuery: true

        eventSource: true
      
      peer0.org.abt.com:
        endorsingPeer: true

        chaincodeQuery: true

        ledgerQuery: true

        eventSource: true
      

      
    chaincodes:
      - mycc:v0
      - blacklistcc:v0

  # name of the channel
  buschannel:
    
    orderers:
      - transactionO1.transactionorderer.com

    peers:
      peer0.org.bus.com:
        endorsingPeer: true

        chaincodeQuery: true

        ledgerQuery: true

        eventSource: true
      
      peer0.org.bank.com:
        endorsingPeer: true

        chaincodeQuery: true

        ledgerQuery: true

        eventSource: true
      
      peer0.org.abt.com:
        endorsingPeer: true

        chaincodeQuery: true

        ledgerQuery: true

        eventSource: true

      
    chaincodes:
      - mycc:v0
      - blacklistcc:v0
  # name of the channel          
  commonchannel:
    
    orderers:
      - transactionO1.transactionorderer.com

    peers:
      peer0.org.bus.com:
        endorsingPeer: true

        chaincodeQuery: true

        ledgerQuery: true

        eventSource: true
      
      peer0.org.bank.com:
        endorsingPeer: true

        chaincodeQuery: true

        ledgerQuery: true

        eventSource: true
      
      peer0.org.abt.com:
        endorsingPeer: true

        chaincodeQuery: true

        ledgerQuery: true

        eventSource: true

      peer0.org.brt.com:
        endorsingPeer: true

        chaincodeQuery: true

        ledgerQuery: true

        eventSource: true
      
    chaincodes:
      - mycc:v0
      - blacklistcc:v0
#
# list of participating organizations in this network
#
organizations:
  BRT:
    mspid: BRTMSP

    peers:
      - peer0.org.brt.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - ca-brt

    # [Optional]. If the application is going to make requests that are reserved to organization
    # administrators, including creating/updating channels, installing/instantiating chaincodes, it
    # must have access to the admin identity represented by the private key and signing certificate.
    # Both properties can be the PEM string or local path to the PEM file. Note that this is mainly for
    # convenience in development mode, production systems should not expose sensitive information
    # this way. The SDK should allow applications to set the org admin identity via APIs, and only use
    # this route as an alternative when it exists.
    adminPrivateKey:
      path: artifacts/channel/crypto-config/peerOrganizations/org.brt.com/users/Admin@org.brt.com/msp/keystore/cc4871cbdbc74d576b8e15af60f3462644b4e22fcfa3000547f3a8057f33f666_sk
    signedCert:
      path: artifacts/channel/crypto-config/peerOrganizations/org.brt.com/users/Admin@org.brt.com/msp/signcerts/Admin@org.brt.com-cert.pem

  Bus:
    mspid: BusMSP

    peers:
      - peer0.org.bus.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - ca-bus

    # [Optional]. If the application is going to make requests that are reserved to organization
    # administrators, including creating/updating channels, installing/instantiating chaincodes, it
    # must have access to the admin identity represented by the private key and signing certificate.
    # Both properties can be the PEM string or local path to the PEM file. Note that this is mainly for
    # convenience in development mode, production systems should not expose sensitive information
    # this way. The SDK should allow applications to set the org admin identity via APIs, and only use
    # this route as an alternative when it exists.
    adminPrivateKey:
      path: artifacts/channel/crypto-config/peerOrganizations/org.bus.com/users/Admin@org.bus.com/msp/keystore/ec074cc08a3ba71e3aff1f93c96637f8704011f51754abff84db93e18fdf6f98_sk
    signedCert:
      path: artifacts/channel/crypto-config/peerOrganizations/org.bus.com/users/Admin@org.bus.com/msp/signcerts/Admin@org.bus.com-cert.pem

  Bank:
    mspid: BankMSP

    peers:
      - peer0.org.bank.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - ca-bank

    # [Optional]. If the application is going to make requests that are reserved to organization
    # administrators, including creating/updating channels, installing/instantiating chaincodes, it
    # must have access to the admin identity represented by the private key and signing certificate.
    # Both properties can be the PEM string or local path to the PEM file. Note that this is mainly for
    # convenience in development mode, production systems should not expose sensitive information
    # this way. The SDK should allow applications to set the org admin identity via APIs, and only use
    # this route as an alternative when it exists.
    adminPrivateKey:
      path: artifacts/channel/crypto-config/peerOrganizations/org.bank.com/users/Admin@org.bank.com/msp/keystore/8b150e4798a6fc9786e11d48bfbdb80a2774d78f79da0125e37db684838180ea_sk
    signedCert:
      path: artifacts/channel/crypto-config/peerOrganizations/org.bank.com/users/Admin@org.bank.com/msp/signcerts/Admin@org.bank.com-cert.pem
  
  ABT:
    mspid: ABTMSP

    peers:
      - peer0.org.abt.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - ca-abt

    # [Optional]. If the application is going to make requests that are reserved to organization
    # administrators, including creating/updating channels, installing/instantiating chaincodes, it
    # must have access to the admin identity represented by the private key and signing certificate.
    # Both properties can be the PEM string or local path to the PEM file. Note that this is mainly for
    # convenience in development mode, production systems should not expose sensitive information
    # this way. The SDK should allow applications to set the org admin identity via APIs, and only use
    # this route as an alternative when it exists.
    adminPrivateKey:
      path: artifacts/channel/crypto-config/peerOrganizations/org.abt.com/users/Admin@org.abt.com/msp/keystore/94d1cb834e15cfd2d3449367bba0dc261573585c68fdee0689d98fa4796cc40a_sk
    signedCert:
      path: artifacts/channel/crypto-config/peerOrganizations/org.abt.com/users/Admin@org.abt.com/msp/signcerts/Admin@org.abt.com-cert.pem
  

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  transactionO1.transactionorderer.com:
    url: grpcs://localhost:8051

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    #openssl x509 -in ca.crt -text
    grpcOptions:
      ssl-target-name-override: transactionO1.transactionorderer.com
      grpc-max-send-message-length: 20

    tlsCACerts:
      path: artifacts/channel/crypto-config/ordererOrganizations/transactionorderer.com/orderers/transactionO1.transactionorderer.com/tls/ca.crt

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org.brt.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://localhost:9051

    # this URL is used to connect the EventHub and registering event listeners
    eventUrl: grpcs://localhost:10001

    grpcOptions:
      ssl-target-name-override: peer0.org.brt.com
    tlsCACerts:
      path: artifacts/channel/crypto-config/peerOrganizations/org.brt.com/peers/peer0.org.brt.com/tls/ca.crt

  peer0.org.bus.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://localhost:9052

    # this URL is used to connect the EventHub and registering event listeners
    eventUrl: grpcs://localhost:10002

    grpcOptions:
      ssl-target-name-override: peer0.org.bus.com
    tlsCACerts:
      path: artifacts/channel/crypto-config/peerOrganizations/org.bus.com/peers/peer0.org.bus.com/tls/ca.crt
  
  peer0.org.bank.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://localhost:9053

    # this URL is used to connect the EventHub and registering event listeners
    eventUrl: grpcs://localhost:10003

    grpcOptions:
      ssl-target-name-override: peer0.org.bank.com
    tlsCACerts:
      path: artifacts/channel/crypto-config/peerOrganizations/org.bank.com/peers/peer0.org.bank.com/tls/ca.crt

  peer0.org.abt.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://localhost:9054

    # this URL is used to connect the EventHub and registering event listeners
    eventUrl: grpcs://localhost:10004

    grpcOptions:
      ssl-target-name-override: peer0.org.abt.com
    tlsCACerts:
      path: artifacts/channel/crypto-config/peerOrganizations/org.abt.com/peers/peer0.org.abt.com/tls/ca.crt

#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
  ca-brt:
    url: https://localhost:7051
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: false
    tlsCACerts:
      path: artifacts/channel/crypto-config/peerOrganizations/org.brt.com/ca/ca.org.brt.com-cert.pem

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      - enrollId: admin
        enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca-brt

  ca-bus:
    url: https://localhost:7052
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: false
    tlsCACerts:
      path: artifacts/channel/crypto-config/peerOrganizations/org.bus.com/ca/ca.org.bus.com-cert.pem

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      - enrollId: admin
        enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca-bus

  ca-bank:
    url: https://localhost:7053
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: false
    tlsCACerts:
      path: artifacts/channel/crypto-config/peerOrganizations/org.bank.com/ca/ca.org.bank.com-cert.pem

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      - enrollId: admin
        enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca-bank

  ca-abt:
    url: https://localhost:7054
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: false
    tlsCACerts:
      path: artifacts/channel/crypto-config/peerOrganizations/org.abt.com/ca/ca.org.abt.com-cert.pem

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      - enrollId: admin
        enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca-abt

  
